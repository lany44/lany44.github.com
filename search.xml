<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[面向对象or行为委托]]></title>
      <url>http://lany44.github.io/2016/08/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1or%E8%A1%8C%E4%B8%BA%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<p>JavaScript是基于原型的语言，严格来说并没有真正面向对象。用面向对象思想编写JS代码时，总会遇到各种各样的坑。虽然es6提供class等语法糖改善了这一尴尬，但类是唯一的代码组织方式吗？nono</p>
<p>行为委托是一种少见但同样强大的设计模式。行为委托中认为对象之间是兄弟关系，相互委托，而不是父类和子类的关系。JavaScript的 <strong>[[Prototype]]</strong> 机制本身就是行为委托机制。你可以选择在JavaScript中努力实现类机制，也可以拥抱更自然的 <strong>[[Prototype]]</strong> 委托机制。</p>
<a id="more"></a>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>首先对比两者的代码风格。</p>
<p>JS中基于原型的面向对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">who</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.me = who</div><div class="line">&#125;</div><div class="line">Foo.prototype.identify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.me</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">who</span>) </span>&#123;</div><div class="line">  Foo.call(<span class="keyword">this</span>, who)</div><div class="line">&#125;</div><div class="line">Bar.prototype = <span class="built_in">Object</span>.create( Foo.prototype )</div><div class="line">Bar.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Hellow, "</span> + <span class="keyword">this</span>.identify() + <span class="string">"."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Bar( <span class="string">"b1"</span> )</div><div class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> Bar( <span class="string">"b2"</span> )</div><div class="line"></div><div class="line">b1 <span class="keyword">instanceof</span> Bar <span class="comment">//true</span></div><div class="line">b1 <span class="keyword">instanceof</span> Foo <span class="comment">//true   b1的.__proto__和Foo的.prototype能走到一起吗/w\</span></div><div class="line"></div><div class="line">b1.speak()</div><div class="line">b2.speak()</div></pre></td></tr></table></figure>
<p>子类Bar继承了父类Foo，然后是生成b1，b2两个实例。b1委托了Bar.prototype。Bar委托了Foo.prototype。</p>
<hr>
<p>行为委托思想的对象关联：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Foo = &#123;</div><div class="line">  init(who) &#123;</div><div class="line">    <span class="keyword">this</span>.me = who</div><div class="line">  &#125;,</div><div class="line">  identify() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.me</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Bar = <span class="built_in">Object</span>.create(Foo)</div><div class="line">Bar.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Hellow, "</span> + <span class="keyword">this</span>.identify() + <span class="string">"."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b1 = <span class="built_in">Object</span>.create(Bar)</div><div class="line">b1.init( <span class="string">"b1"</span> )</div><div class="line"><span class="keyword">var</span> b2 = <span class="built_in">Object</span>.create(Bar)</div><div class="line">b2.init( <span class="string">"b2"</span> )</div><div class="line"></div><div class="line">Foo.isPrototypeof( b1 )<span class="comment">//true</span></div><div class="line">Bar.isPrototypeof( b1 )<span class="comment">//true     b1:Bar，你是我的的原型吗/w\</span></div><div class="line"></div><div class="line">b1.speak()</div><div class="line">b2.speak()</div></pre></td></tr></table></figure>
<p>同样利用 <strong>[[Prototype]]</strong> 把b1委托给Bar，把Bar委托给Foo。实现了3个对象的关联，且不需要模仿类的行为：构造函数，原型以及new。</p>
<h2 id="思维模型"><a href="#思维模型" class="headerlink" title="思维模型"></a>思维模型</h2><p>类风格代码的思维模型：</p>
<p><img src="/1.png" alt=""></p>
<p>对象关联风格代码的思维模型：</p>
<p><img src="/2.png" alt=""></p>
<p>抛弃.prototype  构造函数与 new  。我们只是顺应了JavaScript底层的对象原型机制。</p>
<h2 id="更复杂的场景"><a href="#更复杂的场景" class="headerlink" title="更复杂的场景"></a>更复杂的场景</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>这里我们需要2个控制器对象</p>
<ul>
<li>LoginController——操作网页中的登录表单</li>
<li>AuthController——进行服务器验证</li>
</ul>
<h3 id="面向对象写法：es5"><a href="#面向对象写法：es5" class="headerlink" title="面向对象写法：es5"></a>面向对象写法：es5</h3><p>首先，定义一个拥有公共方法的控制器  <strong>Controller</strong>  作为基类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Controller</span>(<span class="params"></span>) </span>&#123;<span class="comment">//基类</span></div><div class="line">    <span class="keyword">this</span>.errors = [];</div><div class="line">&#125;</div><div class="line">Controller.prototype.showDialog = <span class="function"><span class="keyword">function</span>(<span class="params">title,msg</span>) </span>&#123;</div><div class="line">    <span class="comment">// show</span></div><div class="line">&#125;;</div><div class="line">Controller.prototype.success = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.showDialog( <span class="string">"Success"</span>, msg );</div><div class="line">&#125;;</div><div class="line">Controller.prototype.failure = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.errors.push( err );</div><div class="line">    <span class="keyword">this</span>.showDialog( <span class="string">"Error"</span>, err );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>LoginController</strong> 继承  <strong>Controller</strong>  同时扩展。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginController</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Controller.call( <span class="keyword">this</span> );</div><div class="line">&#125;</div><div class="line">LoginController.prototype = <span class="built_in">Object</span>.create( Controller.prototype );<span class="comment">//建立链接</span></div><div class="line">LoginController.prototype.getUser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_username"</span> ).value;</div><div class="line">&#125;;</div><div class="line">LoginController.prototype.getPassword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_password"</span> ).value;</div><div class="line">&#125;;</div><div class="line">LoginController.prototype.validateEntry = <span class="function"><span class="keyword">function</span>(<span class="params">user,pw</span>) </span>&#123;</div><div class="line">    user = user || <span class="keyword">this</span>.getUser();</div><div class="line">    pw = pw || <span class="keyword">this</span>.getPassword();</div><div class="line">    <span class="keyword">if</span> (!(user &amp;&amp; pw)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Please enter a username &amp; password!"</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pw.length &lt; <span class="number">5</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Password must be 5+ characters!"</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line">LoginController.prototype.failure = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;<span class="comment">//重写基类的方法</span></div><div class="line">    Controller.prototype.failure.call( <span class="keyword">this</span>, <span class="string">"Login invalid: "</span> + err );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>AuthController </strong>继承  <strong>Controller</strong>  同时扩展。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AuthController</span>(<span class="params">login</span>) </span>&#123;</div><div class="line">    Controller.call( <span class="keyword">this</span> );</div><div class="line">    <span class="keyword">this</span>.login = login;</div><div class="line">&#125;</div><div class="line">AuthController.prototype = <span class="built_in">Object</span>.create( Controller.prototype );<span class="comment">//建立链接</span></div><div class="line">AuthController.prototype.server = <span class="function"><span class="keyword">function</span>(<span class="params">url,data</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $.ajax( &#123;</div><div class="line">        url: url,</div><div class="line">        data: data</div><div class="line">    &#125; );</div><div class="line">&#125;;</div><div class="line">AuthController.prototype.checkAuth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> user = <span class="keyword">this</span>.login.getUser();</div><div class="line">    <span class="keyword">var</span> pw = <span class="keyword">this</span>.login.getPassword();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.login.validateEntry( user, pw )) &#123;</div><div class="line">        <span class="keyword">this</span>.server( <span class="string">"/check-auth"</span>,&#123;</div><div class="line">            user: user,</div><div class="line">            pw: pw</div><div class="line">        &#125; )</div><div class="line">        .then( <span class="keyword">this</span>.success.bind( <span class="keyword">this</span> ) )</div><div class="line">        .fail( <span class="keyword">this</span>.failure.bind( <span class="keyword">this</span> ) );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">AuthController.prototype.success = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//重写基类方法</span></div><div class="line">    Controller.prototype.success.call( <span class="keyword">this</span>, <span class="string">"Authenticated!"</span> );</div><div class="line">&#125;;</div><div class="line">AuthController.prototype.failure = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;<span class="comment">//重写基类方法</span></div><div class="line">    Controller.prototype.failure.call( <span class="keyword">this</span>, <span class="string">"Auth Failed: "</span> + err );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>最后  <strong>应用层</strong> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> auth = <span class="keyword">new</span> AuthController(</div><div class="line">    <span class="keyword">new</span> LoginController()</div><div class="line">);</div><div class="line">auth.checkAuth();</div></pre></td></tr></table></figure>
<h3 id="面向对象写法：es6"><a href="#面向对象写法：es6" class="headerlink" title="面向对象写法：es6"></a>面向对象写法：es6</h3><p>同样，先定义一个拥有公共方法的控制器  <strong>Controller</strong>  作为基类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">      	<span class="keyword">this</span>.errors = []</div><div class="line">    &#125;</div><div class="line">    showDialog(title,msg) &#123;</div><div class="line">      <span class="comment">//show</span></div><div class="line">    &#125;</div><div class="line">    success(msg) &#123;</div><div class="line">        <span class="keyword">this</span>.showDialog( <span class="string">"Success"</span>, msg )</div><div class="line">    &#125;</div><div class="line">    failure(err) &#123;</div><div class="line">        <span class="keyword">this</span>.errors.push( err )</div><div class="line">        <span class="keyword">this</span>.showDialog( <span class="string">"Error"</span>, err )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>LoginController</strong> 继承  <strong>Controller</strong>  同时扩展。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">      	<span class="keyword">super</span>()</div><div class="line">    &#125;</div><div class="line">    getUser() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_username"</span> ).value</div><div class="line">    &#125;</div><div class="line">    getPassword() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_password"</span> ).value</div><div class="line">    &#125;</div><div class="line">    validateEntry(user,pw) &#123;</div><div class="line">        user = user || <span class="keyword">this</span>.getUser()</div><div class="line">        pw = pw || <span class="keyword">this</span>.getPassword()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!(user &amp;&amp; pw)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Please enter a username &amp; password!"</span> )</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pw.length &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Password must be 5+ characters!"</span> )</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    failure(err) &#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"Login invalid: "</span> + err)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>AuthController </strong>继承  <strong>Controller</strong>  同时扩展。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(login) &#123;<span class="comment">//login是LoginController的实例</span></div><div class="line">      <span class="keyword">super</span>()</div><div class="line">      <span class="keyword">this</span>.login = login</div><div class="line">    &#125;</div><div class="line">    server(url,data) &#123;</div><div class="line">        <span class="keyword">return</span> $.ajax( &#123;</div><div class="line">            url: url,</div><div class="line">            data: data</div><div class="line">        &#125; )</div><div class="line">    &#125;</div><div class="line">    checkAuth() &#123;</div><div class="line">        <span class="keyword">var</span> user = <span class="keyword">this</span>.login.getUser()</div><div class="line">        <span class="keyword">var</span> pw = <span class="keyword">this</span>.login.getPassword()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.login.validateEntry( user, pw )) &#123;</div><div class="line">            <span class="keyword">this</span>.server( <span class="string">"/check-auth"</span>,&#123;</div><div class="line">                user: user,</div><div class="line">                pw: pw</div><div class="line">            &#125; )</div><div class="line">            .then( <span class="keyword">this</span>.success.bind( <span class="keyword">this</span> ) )</div><div class="line">            .fail( <span class="keyword">this</span>.failure.bind( <span class="keyword">this</span> ) )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    success() &#123;</div><div class="line">        <span class="keyword">super</span>( <span class="string">"Authenticated!"</span> )</div><div class="line">    &#125;</div><div class="line">    failure(err) &#123;</div><div class="line">        <span class="keyword">super</span>( <span class="string">"Auth Failed: "</span> + err )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后  <strong>应用层</strong> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> auth = <span class="keyword">new</span> AuthController(<span class="comment">//这里需要实例化个登录表单作为参数</span></div><div class="line">    <span class="keyword">new</span> LoginController()</div><div class="line">);</div><div class="line">auth.checkAuth();</div></pre></td></tr></table></figure>
<p>先给es6宝宝吃个糖。</p>
<p>所有控制器共享基础行为是success(…)、failure(….)、showDialog(…) 。子类通过重写来扩展默认的基础行为。</p>
<p>我们很熟悉面向对象设计模型，所以觉得上面的内容很亲切自然。事实上因为AuthController和LoginController都不具备对方的基础行为，所以他们两者之间并不存在继承关系。我们的解决办法是进行简单的合成，从而使他们即不必相互继承又能够互相合作。AuthController需要一个LoginController作为参数实例化才能进行交互。</p>
<h3 id="行为委托写法："><a href="#行为委托写法：" class="headerlink" title="行为委托写法："></a>行为委托写法：</h3><p>其实我们不需要构造出一个Controller类来”共享”两个实体间的行为，然后对两个子类进行合成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> LoginController = &#123;</div><div class="line">    errors: [],</div><div class="line">    getUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_username"</span> ).value;</div><div class="line">    &#125;,</div><div class="line">    getPassword: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_password"</span> ).value;</div><div class="line">    &#125;,</div><div class="line">    validateEntry: <span class="function"><span class="keyword">function</span>(<span class="params">user,pw</span>) </span>&#123;</div><div class="line">        user = user || <span class="keyword">this</span>.getUser();</div><div class="line">        pw = pw || <span class="keyword">this</span>.getPassword();</div><div class="line">        <span class="keyword">if</span> (!(user &amp;&amp; pw)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Please enter a username &amp; password!"</span> );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pw.length &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Password must be 5+ characters!"</span> );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;,</div><div class="line">    showDialog: <span class="function"><span class="keyword">function</span>(<span class="params">title,msg</span>) </span>&#123;</div><div class="line">        <span class="comment">// show</span></div><div class="line">    &#125;,</div><div class="line">    failure: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.errors.push( err );</div><div class="line">        <span class="keyword">this</span>.showDialog( <span class="string">"Error"</span>, <span class="string">"Login invalid: "</span> + err );</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AuthController = <span class="built_in">Object</span>.create( LoginController );</div><div class="line">AuthController.errors = [];</div><div class="line">AuthController.checkAuth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> user = <span class="keyword">this</span>.getUser();</div><div class="line">    <span class="keyword">var</span> pw = <span class="keyword">this</span>.getPassword();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.validateEntry( user, pw )) &#123;</div><div class="line">        <span class="keyword">this</span>.server( <span class="string">"/check-auth"</span>,&#123;</div><div class="line">            user: user,</div><div class="line">            pw: pw</div><div class="line">        &#125; )</div><div class="line">        .then( <span class="keyword">this</span>.accepted.bind( <span class="keyword">this</span> ) )</div><div class="line">        .fail( <span class="keyword">this</span>.rejected.bind( <span class="keyword">this</span> ) );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">AuthController.server = <span class="function"><span class="keyword">function</span>(<span class="params">url,data</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $.ajax( &#123;</div><div class="line">        url: url,</div><div class="line">        data: data</div><div class="line">    &#125; );</div><div class="line">&#125;;</div><div class="line">AuthController.accepted = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.showDialog( <span class="string">"Success"</span>, <span class="string">"Authenticated!"</span> )</div><div class="line">&#125;;</div><div class="line">AuthController.rejected = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.failure( <span class="string">"Auth Failed: "</span> + err );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AuthController.checkAuth();</div></pre></td></tr></table></figure>
<p>也许你想要向委托链上添加更多的对象，用 Object.create() 继续进行拼接就行了。</p>
<p>在行为委托模式中，LoginController和AuthController都是对象。它们是兄弟关系。栗子中AuthController委托了LoginController，反过来委托也是可以的。</p>
<p>我们没有在2个对象中定义相同的方法名success(…)，failure(…)，相反的我们定义了更具描述性的方法名accepted(…)、rejected(…)。这正是委托思想中提倡的。同时还提倡尽量避免使用显式伪多态调用（ xxx.prototype.x.call() ）,代之以this.xxx()。</p>
<p>最重要的是我们避免了面向对象中的多态。因为我们没有在不同的对象中使用相同的函数名success(…)和failure(…)。所以不需要使用显式伪多态。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这两天读<strong>You Don’t Know JS</strong>入迷了，特别是最后面向对象和行为委托这两章特别来电。作者对JS有独到的理解，中文翻译也超好，绝对是一本必读。自己也试着去看了github上的原版，真的羡慕能流畅阅读的强者们。(￣ー￣〃)</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><blockquote>
<p>[1] Kyle Simpson. <strong>You Don’t Know JS: this &amp; Object Prototype</strong>[M]. 赵望野 译.</p>
<p>[2] Nicholas C.Zakas. <strong>Professional JavaScript for Web Developers</strong>[M]. 3rd Edition. 李松峰，曹力 译.</p>
<p>[3] 阮一峰. <strong>ES6标准入门</strong>[M]. 第2版</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高性能JavaScript读书笔记]]></title>
      <url>http://lany44.github.io/2016/08/03/%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>《高性能javascript》是高程作者的另一力作，终于借了本来读，同时做了篇读书笔记。</p>
<p>书中一共有十个章节，笔记包含了前八章和开发者工具Timeline面板介绍。(￣ー￣〃)</p>
<a id="more"></a>
<h2 id="第一章：加载与执行"><a href="#第一章：加载与执行" class="headerlink" title="第一章：加载与执行"></a>第一章：加载与执行</h2><ol>
<li><code>&lt;script&gt;</code>标签放在body底部，确保脚本执行时页面完成渲染。</li>
<li>合并<code>&lt;script&gt;</code>标签减少http请求。</li>
<li>无阻塞下载模式：<ul>
<li><code>&lt;script&gt;</code>的defer属性，延迟到window.load事件后下载</li>
<li>dom操作动态创建<code>&lt;script&gt;</code>标签，做lazyload。</li>
<li>利用xhr对象发起ajax请求向页面注入<code>&lt;script&gt;</code>标签。</li>
</ul>
</li>
</ol>
<h2 id="第二章：数据存取"><a href="#第二章：数据存取" class="headerlink" title="第二章：数据存取"></a>第二章：数据存取</h2><ol>
<li>函数通过作用域链来读写变量。所以位置越深的变量访问的时间就越长。访问对象的属性与方法依赖原型链，也是一个道理。所以应将多次访问的深层变量保存到局部。</li>
<li>with([document])与catch(){}会临时添加作用域顶部，所以避免使用with。将catch里的处理交给函数，减少catch内的操作。</li>
</ol>
<h2 id="第三章：DOM编程"><a href="#第三章：DOM编程" class="headerlink" title="第三章：DOM编程"></a>第三章：DOM编程</h2><p>js通过DOM对象这座桥梁操作文档中的节点，所以DOM天生就慢。修改元素更为昂贵，因为他会导致浏览器重新计算页面的几何变化。<em>想起很早以前js实现的一个动画……orz</em></p>
<ol>
<li><p>减少DOM访问次数，多次访问请使用局部变量大法。</p>
</li>
<li><p>小心处理HTML对象集合，集合的length属性会实时变化。多次访问操作，请把它拷贝到数组。</p>
</li>
<li><p>使用更快的API：querySelectorAll与querySelcetor。原因简单来说就是这个API是倒过来解析DOM树的。详情见：<a href="http://www.cnblogs.com/aaronjs/p/3300797.html" target="_blank" rel="external">Aaron大神的jQuery 2.0.3 源码分析Sizzle引擎 - 词法解析</a>。</p>
</li>
<li><p>动画优化：</p>
<ul>
<li><a href="http://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html" target="_blank" rel="external">CSS动画之硬件加速</a></li>
<li><a href="http://zencode.in/14.CSS%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html" target="_blank" rel="external">CSS动画的性能优化</a></li>
</ul>
</li>
<li><p>用事件委托来减少事件处理器的数量：</p>
<ul>
<li>由于事件绑定通产发生在window.onload阶段，容易发生拥堵。且并不是每个按钮都会被用户触发。</li>
<li>事件委托的基本思想是，将事件绑定在外层元素，由外层元素捕获触发事件，然后对内层元素进行操作。</li>
</ul>
</li>
<li><p>重绘reflow与重排repaint－这里打算详细讲下。</p>
<ul>
<li><p>首先浏览器下载完页面中的所有组建后会生成2个内部的数据结构，一是DOM树，二是渲染树（表示DOM节点如何显示）<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn" target="_blank" rel="external">详细</a>。页面几何变化时引发<strong>重排</strong>（重新构造渲染树），之后改变屏幕显示的过程叫<strong>重绘</strong>。2者都是代价昂贵的操作，因此要尽量减少重绘与重排。</p>
</li>
<li><p>获取当前布局信息如offsetTop，getComputedStyle()会强制触发重排以返回正确的值。（<em>该用还是得用不是吗</em>）</p>
</li>
<li><p>最小化重绘重排：</p>
<ul>
<li><p><strong>改变样式时：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'mydiv'</span>);</div><div class="line">el.style.borderLeft = <span class="string">'1px'</span>; </div><div class="line">el.style.borderRight = <span class="string">'2px'</span>;</div><div class="line">el.style.padding = <span class="string">'5px'</span>;</div></pre></td></tr></table></figure>
<p>这样添加样式，每一次都会改变元素的几何属性，在一些旧版浏览器中可能会引起三次重排（现代浏览器会做优化处理，发生一次重排），所以可以优化一下代码，合并样式一次性修改：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'mydiv'</span>);</div><div class="line"><span class="comment">//替换样式</span></div><div class="line">el.style.cssText = <span class="string">'border-left: 1px; border-right: 2px; padding: 5px;'</span>;</div><div class="line"><span class="comment">//保留原有样式</span></div><div class="line">el.style.cssText += <span class="string">'; border-left: 1px;'</span>;</div></pre></td></tr></table></figure>
<p>这样修改只会引起一次重排，更为高效。</p>
<p>还有一种做法就是为想要修改的部分添加一个<code>class</code>使用css一次性修改。</p>
</li>
<li><p><strong>批量修改DOM时：</strong></p>
<p>如果我们需要对DOM进行一系列操作的时候，可以通过下面的做法来减少重绘和重排：</p>
<ol>
<li><p>使元素脱离文档流。</p>
</li>
<li><p>对其进行操作。</p>
<ol>
<li>把元素带回文档中。</li>
</ol>
<p>这样如果我们在第二步进行多次操作时，也只会在第一步和第三步触发两次重排。</p>
<p>有三种基本方法可以使DOM脱离文档流:</p>
<ol>
<li>隐藏元素，修改，重新显示。</li>
<li>使用文档片断（document fragment），在当前DOM外构建一个子树，再把它插入文档中。</li>
<li>把原始元素拷贝到脱离文档的节点中，修改后在把原始元素替换掉。</li>
</ol>
<p>用代码来说明三种方法：</p>
<p>比如现在我们有一个<code>ul</code>列表，我们用一个方法<code>appendDataElement()</code>往列表中添加<code>li</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要操作的列表</span></div><div class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'mylist'</span>);</div><div class="line"><span class="comment">//向列表中添加li，data是li中的内容</span></div><div class="line">appendDataToElement(ul, data);</div></pre></td></tr></table></figure>
<p>如果我们不使用任何方法的话，每插入一个<code>li</code>就会触发一次重排，这样是很影响性能的。所以我们可以使用上面的三种方法。</p>
<p>方法一：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'mylist'</span>);</div><div class="line">ul.style.display = <span class="string">'none'</span>; </div><div class="line">appendDataToElement(ul, data);</div><div class="line">ul.style.display = <span class="string">'block'</span>;</div></pre></td></tr></table></figure>
<p> <strong>方法二：（推荐）</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line">appendDataToElement(fragment, data);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'mylist'</span>).appendChild(fragment);</div></pre></td></tr></table></figure>
<p>方法三：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> old = <span class="built_in">document</span>.getElementById(<span class="string">'mylist'</span>); </div><div class="line"><span class="keyword">var</span> clone = old.cloneNode(<span class="literal">true</span>);</div><div class="line">appendDataToElement(clone, data);</div><div class="line">old.parentNode.replaceChild(clone, old);</div></pre></td></tr></table></figure>
<p>文章中是推荐我们使用第二种方法，因为这种方法本来设计的初衷就是为了解决这类任务的（更新和移动节点）。而且这种方法只触发一次重拍，只访问一次DOM节点。</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="第四章：算法与流程控制"><a href="#第四章：算法与流程控制" class="headerlink" title="第四章：算法与流程控制"></a>第四章：算法与流程控制</h2><ol>
<li><p>循环：</p>
<ul>
<li><p>只有for-in慢于其他循环类型。第一步应减少数组属性的查询次数（见第二章），第二步采用倒序循环，让控制条件与0比较。非0会转化为true，0会变成false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=items.length; i--; ) &#123;</div><div class="line">  process(items[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = items.length</div><div class="line"><span class="keyword">while</span> (i--) &#123;</div><div class="line">  process(items[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = items.length<span class="number">-1</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  process(items[i])</div><div class="line">&#125;<span class="keyword">while</span> (i--);</div></pre></td></tr></table></figure>
</li>
<li><p>当循环次数多时，采用“<a href="https://zh.wikipedia.org/wiki/%E8%BE%BE%E5%A4%AB%E8%AE%BE%E5%A4%87" target="_blank" rel="external">达夫设备</a>”来减少循环次数。</p>
</li>
</ul>
</li>
<li><p>条件语句：</p>
<ul>
<li>优化if-else，将最可能出现的条件放在首位。</li>
<li>特殊情况使用”<a href="https://zh.wikipedia.org/wiki/%E6%9F%A5%E6%89%BE%E8%A1%A8" target="_blank" rel="external">查找表</a>“。</li>
<li>递归的模式与调用栈限制，超出限制时应改为迭代算法。</li>
</ul>
</li>
</ol>
<h2 id="第五章：字符串和正则表达式"><a href="#第五章：字符串和正则表达式" class="headerlink" title="第五章：字符串和正则表达式"></a>第五章：字符串和正则表达式</h2><ol>
<li><p>字符串拼接：除了ie7-，大部分浏览器对+ &amp; +=进行了很好的优化，但你还是要避免临时字符串的产生。若是要考虑ie7-，应该使用Array.prototype.join()；</p>
</li>
<li><p>正则表达式优化：</p>
<p>额，这里先占个坑。。</p>
</li>
</ol>
<h2 id="第六章：快速响应的用户界面"><a href="#第六章：快速响应的用户界面" class="headerlink" title="第六章：快速响应的用户界面"></a>第六章：快速响应的用户界面</h2><p>js与用户界面更新在同一个进程中运行，因此同时只能处理一件事情。所以要高效的关系UI线程，确保js不能运行太长的时间。</p>
<ol>
<li><p>任何js任务都不能超过100ms，否则会对用户感受到与页面失联。且js运行期间，浏览器响应用户的交互存在差异。</p>
</li>
<li><p>可以利用定时器安排代码的延迟执行。</p>
</li>
<li><p>web workers允许你在UI线程外部执行js代码。从而避免UI锁定。</p>
<ul>
<li><p>每个web worker运行在UI线程的一个子集环境中，拥有部分js脚本的特性。</p>
<ul>
<li><code>navigator</code> 对象</li>
<li><code>location</code> 对象（只读）</li>
<li><code>XMLHttpRequest</code></li>
<li><code>setTimeout()/clearTimeout()</code> 和 <code>setInterval()/clearInterval()</code></li>
<li><a href="http://www.html5rocks.com/tutorials/appcache/beginner/" target="_blank" rel="external">应用缓存</a></li>
<li>使用 <code>importScripts()</code> 方法导入外部脚本</li>
<li><a href="http://www.html5rocks.com/zh/tutorials/workers/basics/#toc-enviornment-subworkers" target="_blank" rel="external">生成其他 Web Worker</a></li>
</ul>
<p>Worker 无法使用：</p>
<ul>
<li>DOM（非线程安全）</li>
<li><code>window</code> 对象</li>
<li><code>document</code> 对象</li>
<li><code>parent</code> 对象</li>
</ul>
</li>
<li><p>实际应用：用web worker解析一个很大的JSON</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'xxx.js'</span>)</div><div class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> jsonData = event.data</div><div class="line">  <span class="comment">//todo</span></div><div class="line">&#125;</div><div class="line">worker.postMessage(jsonText)</div><div class="line"><span class="comment">//xxx.js</span></div><div class="line">self.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> jsonText = event.data</div><div class="line">  <span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(jsonText)</div><div class="line">  self.postMessage(jsonData)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="第七章：AJAX"><a href="#第七章：AJAX" class="headerlink" title="第七章：AJAX"></a>第七章：AJAX</h2><p>关键在于选择正确的数据格式和与之匹配的传输技术。常见的有html，xml，json，json-p。</p>
<ol>
<li>万能的减少请求。做资源打包。</li>
<li>为缩短白屏时间，主要内容加在完毕后，利用AJAX请求次要资源。lazyload</li>
</ol>
<h2 id="第八章：编程实践"><a href="#第八章：编程实践" class="headerlink" title="第八章：编程实践"></a>第八章：编程实践</h2><ol>
<li><p>避免通过eval()和Function()构造器引发的双重求值带来的性能消耗。同样的，给setTimeout()和setInterval()传递函数而不是字符串作为参数。</p>
</li>
<li><p>用直接量创建数组和对象。</p>
</li>
<li><p>避免重复的浏览器检测，使用延迟加载或条件预加载。其主要思想是只进行一次环检测。</p>
<ul>
<li><p>eg：绑定-移除事件的兼容性代码：</p>
<p>方法一：重复的写法<strong>（不推荐）</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span>(<span class="params">target, eventType, handler</span>) </span>&#123;  </div><div class="line">	<span class="keyword">if</span> (target.addEventListener) &#123;    </div><div class="line">    	target.addEventListener(eventType, handler, <span class="literal">false</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;    </div><div class="line">      	target.attachEvent(<span class="string">"on"</span>, eventType, handler)  </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHandler</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">  	<span class="keyword">if</span> (target.removeEventListener) &#123;    </div><div class="line">      	target.removeEventListener(eventType, handler, <span class="literal">false</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      	target.detachEvent(<span class="string">"on"</span>, eventType, handler)  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二：延迟加载：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span>(<span class="params">target, eventType, handler</span>) </span>&#123;  </div><div class="line">	<span class="keyword">if</span> (target.addEventListener) &#123;  </div><div class="line">      	addHandler = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    		target.addEventListener(eventType, handler, <span class="literal">false</span>)</div><div class="line">      	&#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;    </div><div class="line">      	addHandler = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    		target.attachEvent(<span class="string">"on"</span> + eventType, handler)</div><div class="line">      	&#125;  </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHandler</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">  	<span class="keyword">if</span> (target.removeEventListener) &#123;    </div><div class="line">        removeHandler = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    		target.removeEventListener(eventType, handler, <span class="literal">false</span>)</div><div class="line">      	&#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      	removeHandler = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    		target.detachEvent(<span class="string">"on"</span>, eventType, handler) </div><div class="line">      	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法三：条件预加载：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addHandler = <span class="built_in">document</span>.body.addEventListener ?</div><div class="line">    			 <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    				target.addEventListener(eventType, handler, <span class="literal">false</span>)</div><div class="line">      			 &#125;:</div><div class="line">				 <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    				target.attachEvent(<span class="string">"on"</span> + eventType, handler)</div><div class="line">      			 &#125;  </div><div class="line"><span class="keyword">var</span> removeHandler = <span class="built_in">document</span>.body.addEventListener ?</div><div class="line">    			 <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    				target.removeEventListener(eventType, handler, <span class="literal">false</span>)</div><div class="line">      			 &#125;:</div><div class="line">				 <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</div><div class="line">    				target.attachEvent(<span class="string">"on"</span> + eventType, handler)</div><div class="line">      			 &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数学计算时，考虑直接操作数字的二进制形式的位运算。</p>
<ul>
<li><p>eg：判断一个数是奇数还是偶数。按位与运算。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</div><div class="line">    	<span class="built_in">console</span>.log(n + <span class="string">"是奇数"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="built_in">console</span>.log(n + <span class="string">"是偶数"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">assert(<span class="number">3</span>); <span class="comment">// 3是奇数</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用原生对象，例如Math对象。</p>
</li>
</ol>
<h2 id="第九章：开发者工具的Timeline面板"><a href="#第九章：开发者工具的Timeline面板" class="headerlink" title="第九章：开发者工具的Timeline面板"></a>第九章：开发者工具的Timeline面板</h2><p>利用chrome开发者工具的Timeline面板监测分析页面性能。写到这里实在太困，所以偷了懒…./w\。</p>
<p>首先，按下 F12 打开”开发者工具”，切换到Timeline面板。</p>
<p><img src="./1.png" alt="img"></p>
<p>左上角有一个灰色的圆点，这是录制按钮，按下它会变成红色。然后，在网页上进行一些操作，再按一次按钮完成录制。</p>
<p>Timeline面板提供两种查看方式：横条的是”事件模式”（Event Mode），显示重新渲染的各种事件所耗费的时间；竖条的是”帧模式”（Frame Mode），显示每一帧的时间耗费在哪里。</p>
<p>先看”事件模式”，你可以从中判断，性能问题发生在哪个环节，是JavaScript的执行，还是渲染？</p>
<p><img src="2.png" alt="img"></p>
<p>不同的颜色表示不同的事件。</p>
<p><img src="3.png" alt="img"></p>
<ul>
<li>蓝色：网络通信和HTML解析</li>
<li>黄色：JavaScript执行</li>
<li>紫色：样式计算和布局，即重排</li>
<li>绿色：重绘</li>
</ul>
<p>哪种色块比较多，就说明性能耗费在那里。色块越长，问题越大。</p>
<p><img src="4.png" alt="img"></p>
<p><img src="5.png" alt="img"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>书很好读，一天就读完了。可是性能优化岂是一本书，一天能够讲清楚的。看的同时也借助搜索做了一些扩展，如醍醐灌顶一般。大到页面的渲染过程，css动画优化，小到一个操作符，API。收获很大，之后的代码中也要实践起来。啊，犯困twice……</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>[1] 阮一峰. <a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="external"><strong>网页性能管理详解</strong></a>[CP/OL].</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[跨域请求问题总结]]></title>
      <url>http://lany44.github.io/2016/07/31/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>之前web知乎项目需要从知乎服务器上请求数据，遇到了请求跨域的问题。我将了解到的解决方案做下总结。</p>
<a id="more"></a>
<h2 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h2><p>为了保证用户信息的安全，防止恶意的网站窃取数据。1995年Netscape公司将同源政策<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">（same-origin policy）</a>引入浏览器，同源政策成为了浏览器最核心也最基本的安全功能。</p>
<p>若2个网页的协议，域名，端口中三者中任何一个不同，那么就会受到 “同源政策” 的限制。具体表现为：</p>
<ol>
<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>
<li>DOM 无法获得。</li>
<li>AJAX 请求不能发送。</li>
</ol>
<p>举个例子：</p>
<p>下表给出了相对<code>http://store.company.com/dir/page.html</code>同源检测的示例:</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>结果</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>http://store.company.com/dir2/other.html</code></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><code>http://store.company.com/dir/inner/another.html</code></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><code>https://store.company.com/secure.html</code></td>
<td>失败</td>
<td>协议不同</td>
</tr>
<tr>
<td><code>http://store.company.com:81/dir/etc.html</code></td>
<td>失败</td>
<td>端口不同</td>
</tr>
<tr>
<td><code>http://news.company.com/dir/other.html</code></td>
<td>失败</td>
<td>主机名不同</td>
</tr>
</tbody>
</table>
<p>同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性就无从谈起。</p>
<p>同源政策规定下，AJAX请求只能发给同源的网址，否则就报错。</p>
<p>有以下几种方法避开这个限制。</p>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。</p>
<p>它的基本思想是，网页通过添加一个script元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在前端预先指定名字的回调函数里传回来引发执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScriptTaget</span>(<span class="params">address</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> script = ducument.creatElement(<span class="string">'script'</span>)</div><div class="line">  script.setAttribute(<span class="string">'type'</span>, <span class="string">'text/javascript'</span>)</div><div class="line">  script.src = address</div><div class="line">  <span class="built_in">document</span>.body.appendChild(script)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  addScriptTaget(<span class="string">'http://example.com/xxxxx?callback=getData'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  <span class="comment">//todo...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务器器端返回</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getData(&#123;</div><div class="line">	<span class="string">"xxxxx"</span>: <span class="string">"a@＃¥％……&amp;＊"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket是一种通信协议，使用<code>ws://</code>（非加密）和<code>wss://</code>（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
<p>下面是一个例子，浏览器发出的WebSocket请求的头信息。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; GET /chat HTTP/<span class="number">1.1</span></div><div class="line">&gt; Host: server.example.com</div><div class="line">&gt; Upgrade: websocket</div><div class="line">&gt; Connection: Upgrade</div><div class="line">&gt; Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</div><div class="line">&gt; Sec-WebSocket-Protocol: chat, superchat</div><div class="line">&gt; Sec-WebSocket-Version: <span class="number">13</span></div><div class="line">&gt; Origin: http:<span class="comment">//example.com</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，有一个字段是<code>Origin</code>，表示该请求的请求源（origin），即发自哪个域名。</p>
<p>正是因为有了<code>Origin</code>这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; HTTP/<span class="number">1.1</span> <span class="number">101</span> Switching Protocols</div><div class="line">&gt; Upgrade: websocket</div><div class="line">&gt; Connection: Upgrade</div><div class="line">&gt; Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</div><div class="line">&gt; Sec-WebSocket-Protocol: chat</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>实现了websocket的浏览器：</p>
<table>
<thead>
<tr>
<th>Chrome</th>
<th>Supported in version 4+</th>
</tr>
</thead>
<tbody>
<tr>
<td>Firefox</td>
<td>Supported in version 4+</td>
</tr>
<tr>
<td>Internet Explorer</td>
<td>Supported in version 10+</td>
</tr>
<tr>
<td>Opera</td>
<td>Supported in version 10+</td>
</tr>
<tr>
<td>Safari</td>
<td>Supported in version 5+</td>
</tr>
</tbody>
</table>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>Cross-Origin Resource Sharing (CORS) 是W3C标准，它定义了在跨域访问资源时浏览器和服务器之间如何通信。CORS背后的基本思想是使用自定义的HTTP头部允许浏览器和服务器相互了解对方，从而决定请求或响应成功与否。<br>CORS与JSONP相比，更为先进、方便和可靠。</p>
<ol>
<li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</li>
<li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理</li>
<li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。</li>
</ol>
<p>对一个简单的请求，没有自定义头部，要么使用GET，要么使用POST，它的主体是text/plain,请求用一个名叫Orgin的额外的头部发送。Origin头部包含请求页面的头部（协议，域名，端口），这样服务器可以很容易的决定它是否应该提供响应。<br>服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。<br>Access-Control-Allow-Origin：*   表示允许任何域的请求<br>为了防止XSS攻击我们的服务器， 我们可以限制域，比如<br>Access-Control-Allow-Origin: “允许域的url”</p>
<p>后文中的反向代理就是用了这个。</p>
<p>除了Access-Control-Allow-Origin外还有很多参数可以配置。</p>
<p>更多详情见  <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">阮一峰－跨域资源共享 CORS 详解</a>。</p>
<hr>
<p>以上三种情况都需要前后端配合，各自的使用场景不同，也各有利弊。</p>
<p>那么像我那样向知乎日报请求数据的，以上方法显然都不适用，那么。</p>
<h2 id="一个chrome插件"><a href="#一个chrome插件" class="headerlink" title="一个chrome插件"></a>一个chrome插件</h2><p>chrome应用商店搜索－Allow-Control-Allow-Origin</p>
<p>官方描述：Allows to you request any site with ajax from any source. Adds to response ‘Allow-Control-Allow-Origin: *’ header</p>
<p>本地开发调试时使用的就是他。再次感谢yatessss前辈，非常方便。</p>
<h2 id="反向代理转发"><a href="#反向代理转发" class="headerlink" title="反向代理转发"></a>反向代理转发</h2><p>这种解决办法的思想为：架设服务器代理。浏览器请求同源服务器，再由后者请求外部服务。</p>
<p>这里介绍利用nginx做代理服务器。</p>
<p>mac下修改配置文件：/usr/local/etc/nginx/nginx.conf </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       <span class="number">8000</span>;</div><div class="line">    server_name  api.a.com;</div><div class="line">    location /data/&#123;</div><div class="line">        proxy_pass http:<span class="comment">//b.com/;</span></div><div class="line">        add_header Content-Type <span class="string">"text/plain;charset=utf-8"</span>;</div><div class="line">        add_header <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'a.com'</span>;   </div><div class="line">        add_header <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>; </div><div class="line">        add_header <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>a.com下去往api.a.com/data/下的请求都会转发到b.com/。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>若是能操作到后端，那么JSONP，CORS都不是难事，否则还是乖乖搭个服务器做代理转发。或者利用chrome插件暂时解决一下。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>[1] 阮一峰. <a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">浏览器同源政策及其规避方法</a>[CP/OL].</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目总结——Vue+Vue-Router实现知乎日报]]></title>
      <url>http://lany44.github.io/2016/07/24/vue+vue-router%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5/</url>
      <content type="html"><![CDATA[<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>大约一周前喻导从掘金vue版块看到一个vue实现知乎日报的项目，然后顺手又一次向我使出大安利术。终于在他煽动下，我大概看了下前辈项目的源码（我去，我竟然能看懂），之后一边看文档一边自己也试着实现了出来。因为之前一直在学习React生态圈相关，对component，container，state，生命周期等概念有了理解，加上vue本身的易用原则，文档又写的详细易懂。所以总体下来自己在一边感叹vue API优美的同时（<em>跟风</em>），也写的很爽。</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote>
<p><em>知乎接口跨域限制所以没能提供在线版本</em>     orz</p>
</blockquote>
<p><a href="https://github.com/lany44/zhihu-daliy-vue" target="_blank" rel="external">项目源码</a></p>
<p><img src="./zhihu.gif" alt=""></p>
<p>项目历时一周，因为暑假自己留校学习，基本没有受到干扰，除了吃饭睡觉都在码代码。</p>
<p>开发环境也从windows过度到了mac平台。          ——<em>家里的应援 (ง •_•)ง</em>  </p>
<h2 id="Architecture-1"><a href="#Architecture-1" class="headerlink" title="Architecture"></a>Architecture</h2><ul>
<li>JavaScript: Vue + Vue-Router + Swiper + Fastclick</li>
<li>Css: Sass + PostCSS</li>
<li>build: Npm + Vue-cli  [Webpack]</li>
</ul>
<h2 id="Vue-Vue-Router-Abstract"><a href="#Vue-Vue-Router-Abstract" class="headerlink" title="Vue + Vue-Router Abstract"></a>Vue + Vue-Router Abstract</h2><p>这里简单介绍vue + vue-router ，可以跳过。</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>Vue是种“轻 巧”的<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">MVVM</a>前端框架，<em>(目前官网的版本是1.0.x)</em>  其中ViewModel层由vue提供。在vue中我们通过具有特殊前缀的HTML 属性来实现数据绑定，也可以使用常见的花括号模板插值，或是在表单元素上使用v-model双向绑定。</p>
<p>Vue组件可以理解为预先定义好了行为的ViewModel类。一个组件内可以预定义很多选项，<a href="http://cn.vuejs.org/api/#选项-数据" target="_blank" rel="external">官方文档</a>中有详细的列举，除了基本的template，props，data，methods外，还有组件生命周期不同阶段调用的hook函数，自定义事件events等选项可以配置。</p>
<p><a href="http://cn.vuejs.org/guide/components.html#父子组件通信" target="_blank" rel="external">组件间通信</a>也是非常重要的一环，父－&gt;子可以通过props传值，或配置ref来拿到子组件。或者自定义events后，父组件里v-on绑定事件给子组件，子组件调用$despatch()触发相应事件。由于绑定和触发的代码是分散在各个组件中，所以当组件间的通信复杂起来时，你需要<a href="http://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="external">vuex</a>将容器中的状态存储在顶层中来进行管理分发。</p>
<p>那么，如何利用它进行组件化开发呢？Webpack + 官方提供的vue-loader 直接搞.vue单文件格式来书写Vue组件，通过vue-devtools调试。另外安装对应的Webpack loader后template里还支持方言呢。    <em>个人感觉模版语法之与React的jsx语法还是模版写起来更明确些。</em></p>
<p>同时官方提供了Vue-cli这简单粗暴的东西帮你构建项目模版。        <em>搞起来就是贼快。</em></p>
<p>此外还有，<a href="http://jiongks.name/blog/announcing-vue-2/" target="_blank" rel="external">令人期待的Vue 2.0</a>。</p>
<h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h3><p><a href="http://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Vue-Router</a>是Vue官方提供的路由器。用来帮助Vue项目构筑路由系统。使用router.map()配置app中的路径后，除了使用实例方法外进行切换外，使用在组件上配置v-link=””进行跳转。vue-router将路由跳转的过程细分，用户可以通过配置容器组件中route项调用跳转过程中不同阶段的hook函数，以此来在切换过程中做其他事情，比如请求数据，调用methods什么的。</p>
<h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>项目包含以下页面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">router.map(&#123;</div><div class="line">  <span class="string">'/'</span>: &#123;</div><div class="line">    component: list,</div><div class="line">    subRoutes: &#123;</div><div class="line">      <span class="string">'/'</span>: &#123;<span class="comment">//初始的list页</span></div><div class="line">        component: mainDefault</div><div class="line">      &#125;,</div><div class="line">      <span class="string">'/theme/:id'</span>: &#123;<span class="comment">//侧边sidebar进入的主题详情页</span></div><div class="line">        name: <span class="string">'theme'</span>,</div><div class="line">        component: mainTheme</div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/detail/:id'</span>: &#123;<span class="comment">//内容详情页</span></div><div class="line">    name: <span class="string">'detail'</span>,</div><div class="line">    component: detail</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/comments'</span>: &#123;<span class="comment">//评论详情页</span></div><div class="line">    component: comments</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/recommenders'</span>: &#123;<span class="comment">//内容推荐者页</span></div><div class="line">    component: recommenders</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/section'</span>: &#123;<span class="comment">//内容所属栏目汇总页</span></div><div class="line">    component: section</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/lany44'</span>: &#123;<span class="comment">//个人简介，用来顺便求职前端实习。 orz</span></div><div class="line">    component: lany44</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>部分实现：</p>
<ul>
<li>初始列表的动态加载以及列表重定位到上次浏览的地方。这部分代码写在main-default和detail组件中。通过路由系统的钩子函数，在激活阶段调用data()函数向windows绑定添加列表和修改顶部日期的事件，并判断当前url的name。将当前的scrollTop存在sessionStorage中，在detail的跳转中重定位列表的scrollTop。</li>
</ul>
<ul>
<li>GET请求部分没有使用Vue-Resource而使用了<a href="https://github.com/camsong/blog/issues/2?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">fetch()</a>，开始是听说它可以帮我解决跨域的问题，似懂非懂的用了起来，结果失败了。不知道是不是header配置写的不对。本地开发阶段用chrome插件Allow-Control-Allow-Origin拿到了数据。        <em>orz</em></li>
<li>主页侧滑列表的show hide由于多个地方可以控制，我将方法写在了util里一一绑定了事件。当这样的情况变多时就会越发难以控制。</li>
<li>所用到的图片，参考<a href="http://tangrui.win/2016/01/09/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%BD%BB%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5/#more" target="_blank" rel="external">链接</a>。</li>
</ul>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>项目功能趋于展示，全局只写了一个events…大部分参数分析接口数据后用props传下去就可以了。</p>
<p>简单介绍下组件们</p>
<ul>
<li>comments-comp——-单个评论     </li>
<li>detail-content———–内容主体</li>
<li>detail-header————头部一号</li>
<li>list-comp——————首页列表里的单个项</li>
<li>list-header—————-头部二号</li>
<li>main-default————-初始列表页，import了slider和list-comp</li>
<li>main-theme————–主题内容主体，import了list-comp</li>
<li>sidebar———————侧滑列表。<em>手动斜眼I，偷懒没写滑动事件。</em></li>
<li>slider————————初始页的轮播。<em>手动斜眼II，Swiper写的。</em></li>
</ul>
<p>部分实现与问题：</p>
<ul>
<li>第一次以组建化思想写的完整项目，一开始就知道怼头部……      <em>(hahahh</em></li>
</ul>
<ul>
<li><p>list-comp实现了复用，其实每次有新的需求时，都是返回去稍微改改。</p>
</li>
<li><p>comments-comp单个评论组件里格式化时间戳，接口返回的评论时间是”time”: 1413600071的格式。</p>
<p>这里贴下格式化时间戳的代码，当然不是我写的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  格式化时间戳</div><div class="line">  1469175239 ｜ fommatTime "yyyy-mm-dd hh-mm-ss"</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> formatTimeAPI = (timeStamp, fmt) =&gt; &#123;<span class="comment">// author: meizz</span></div><div class="line">  <span class="keyword">if</span>(!timeStamp)</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> _timeStamp = <span class="built_in">parseInt</span>(timeStamp)</div><div class="line">  <span class="keyword">if</span>(_timeStamp.toString().length === <span class="number">10</span>)</div><div class="line">    _timeStamp *= <span class="number">1000</span></div><div class="line"></div><div class="line">  !fmt &amp;&amp; (fmt = <span class="string">'yyyy-mm-dd'</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Date</span>(_timeStamp)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="string">'M+'</span>: t.getMonth() + <span class="number">1</span>,</div><div class="line">    <span class="string">'d+'</span>: t.getDate(),</div><div class="line">    <span class="string">'h+'</span>: t.getHours(),</div><div class="line">    <span class="string">'m+'</span>: t.getMinutes(),</div><div class="line">    <span class="string">'s+'</span>: t.getSeconds(),</div><div class="line">    <span class="string">'q+'</span>: <span class="built_in">Math</span>.floor((t.getMonth() + <span class="number">3</span>)/ <span class="number">3</span>),</div><div class="line">    <span class="string">'S'</span>: t.getMilliseconds() </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(fmt)) </div><div class="line">    fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (t.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length))</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'('</span> + k + <span class="string">')'</span>).test(fmt))</div><div class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length ===<span class="number">1</span>)? (o[k]) : ((<span class="string">'00'</span> + 				  o[k]).substr((<span class="string">''</span>+o[k]).length)))</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> fmt</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>感谢喻导，接触前端一年了都是一个人在闷头苦学，走了不不知道多少弯路。后来认识喻导，几次交流都一直鼓励我动手去做，东西先用起来。现在我越来越自信了，前端之路也会走的更加坚定。最后祝愿你的教育事业能一帆风顺。</p>
<p>感谢yatessss，项目里给了我不小的帮助。超nice的前辈。</p>
<p>最后要来一剂安利，Vue非常容易上手，文档好读，外加Vue-cli，vue-devtools。你不想来一套吗。</p>
]]></content>
    </entry>
    
  
  
</search>
